import pandas as pd
from scipy.stats import pearsonr

# Load data from the CSV file
data = pd.read_csv('bitcoin-nupl.csv', delimiter=',', parse_dates=['DateTime'])
data.rename(columns=lambda x: x.strip(), inplace=True)  # Clean up column names

# Dynamic parameters
NUPL_MIN, NUPL_MAX = 0.5, 0.83  # NUPL range
VARIATION_MIN = 0.02  # Minimum variation threshold to consider a peak
MIN_INTERVAL = 7  # Minimum interval between two peaks (days)

# Detect NUPL peaks
data['NUPL Variation'] = data['NUPL Value'].diff()
data['Valid Peak'] = (data['NUPL Value'].between(NUPL_MIN, NUPL_MAX)) & (data['NUPL Variation'].abs() > VARIATION_MIN)
peaks = data[data['Valid Peak']].copy()
peaks = peaks[peaks['DateTime'].diff().dt.days > MIN_INTERVAL]  # Filter out peaks that are too close together

# Analyze BTC prices after each peak
raw_results = []
for _, peak in peaks.iterrows():
    peak_date = peak['DateTime']
    peak_nupl = peak['NUPL Value']
    
    following_data = data[data['DateTime'] > peak_date]
    if not following_data.empty:
        min_price_row = following_data.loc[following_data['BTC price (NUPL)'].idxmin()]
        min_date = min_price_row['DateTime']
        min_price = min_price_row['BTC price (NUPL)']
        delay_days = (min_date - peak_date).days
        
        raw_results.append({
            'Peak Date': peak_date,
            'NUPL Peak Value': peak_nupl,
            'Min BTC Date': min_date,
            'Min BTC Price': min_price,
            'Delay (days)': delay_days
        })

# Convert results to DataFrame
raw_results_df = pd.DataFrame(raw_results)

# Analyze correlation for different delays
max_delay = 30  # Test delays from 0 to 30 days
results = []
for delay in range(max_delay):
    delayed_prices = raw_results_df['Min BTC Price'].shift(-delay)
    valid_data = raw_results_df[['NUPL Peak Value']].join(delayed_prices).dropna()
    
    correlation, p_value = pearsonr(valid_data['NUPL Peak Value'], valid_data['Min BTC Price'])
    results.append({'Delay': delay, 'Correlation': correlation, 'P-value': p_value})

# Convert results to DataFrame
correlation_df = pd.DataFrame(results)
optimal_delay = correlation_df.loc[correlation_df['Correlation'].idxmin()]

# Detect buy signals (low NUPL + upward price trend)
data['Price Trend'] = data['BTC price (NUPL)'].pct_change(periods=7)  # 7-day variation
data['Buy Signal'] = (data['NUPL Value'] < 0.5) & (data['Price Trend'] > 0)

# Save results
data.to_csv('nupl_analysis_results.csv', index=False)

# Display results
print(f"The optimal delay for an inverse correlation is {optimal_delay['Delay']} days with a correlation of {optimal_delay['Correlation']:.4f}.")
print(f"P-value: {optimal_delay['P-value']:.4f}")
print("\nCorrelations for each delay:")
print(correlation_df.to_string(index=False))
print("\nDetected buy signals:")
print(data[['DateTime', 'BTC price (NUPL)', 'Buy Signal']].query("`Buy Signal` == True"))

